import os
import sys
import re
import requests
from bs4 import BeautifulSoup
import time
import logging
from datetime import datetime, timedelta
import threading
from dotenv import load_dotenv
from flask import Flask, request
import traceback

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('imot_monitor.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

# –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ environment variables
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
class Config:
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '')
    TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '')
    CHECK_INTERVAL = 600  # 10 –º–∏–Ω—É—Ç–∏
    MAX_RETRIES = 3
    REQUEST_TIMEOUT = 15
    URLS = [
        'https://www.imot.bg/pcgi/imot.cgi?act=3&slink=bv3nqa&f1=1',
        'https://www.imot.bg/pcgi/imot.cgi?act=3&slink=bv3nye&f1=1',
        'https://www.imot.bg/pcgi/imot.cgi?act=3&slink=bv3nz2&f1=1',
        'https://www.imot.bg/pcgi/imot.cgi?act=3&slink=bv3o1w&f1=1',
    ]
    HEADERS = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept-Language': 'bg-BG,bg;q=0.9,en-US;q=0.8,en;q=0.7'
    }

# Thread-safe –∫–æ–ª–µ–∫—Ü–∏–∏
class ThreadSafeSet:
    def __init__(self):
        self._set = set()
        self._lock = threading.Lock()

    def add(self, item):
        with self._lock:
            self._set.add(item)

    def __contains__(self, item):
        with self._lock:
            return item in self._set

seen_links = ThreadSafeSet()
app = Flask(__name__)

# Telegram –∏–∑–ø—Ä–∞—â–∞–Ω–µ

def send_telegram(message, retry=0):
    if not Config.TELEGRAM_TOKEN or not Config.TELEGRAM_CHAT_ID:
        logging.warning("–õ–∏–ø—Å–≤–∞—Ç Telegram credentials")
        return False

    try:
        url = f'https://api.telegram.org/bot{Config.TELEGRAM_TOKEN}/sendMessage'
        data = {
            'chat_id': Config.TELEGRAM_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML',
            'disable_web_page_preview': True
        }
        response = requests.post(url, data=data, timeout=Config.REQUEST_TIMEOUT)
        response.raise_for_status()
        return True
    except Exception as e:
        if retry < Config.MAX_RETRIES:
            time.sleep(2)
            return send_telegram(message, retry+1)
        logging.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –∫—ä–º Telegram: {e}")
        return False

# –î–∞—Ç–∞ –ø–∞—Ä—Å–≤–∞–Ω–µ –∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ

def parse_date(date_str):
    try:
        match = re.search(r'(\d{2}):(\d{2})\s+–Ω–∞\s+(\d{2})\s+([–∞-—è–ê-–Ø]+),\s+(\d{4})', date_str)
        if match:
            hour, minute, day, month_bg, year = match.groups()
            bg_months = {
                '—è–Ω—É–∞—Ä–∏': '01', '—Ñ–µ–≤—Ä—É–∞—Ä–∏': '02', '–º–∞—Ä—Ç': '03', '–∞–ø—Ä–∏–ª': '04',
                '–º–∞–π': '05', '—é–Ω–∏': '06', '—é–ª–∏': '07', '–∞–≤–≥—É—Å—Ç': '08',
                '—Å–µ–ø—Ç–µ–º–≤—Ä–∏': '09', '–æ–∫—Ç–æ–º–≤—Ä–∏': '10', '–Ω–æ–µ–º–≤—Ä–∏': '11', '–¥–µ–∫–µ–º–≤—Ä–∏': '12'
            }
            month = bg_months.get(month_bg.lower(), '01')
            return datetime.strptime(f"{day}.{month}.{year} {hour}:{minute}", "%d.%m.%Y %H:%M")
    except Exception:
        return None
    return None

def extract_ad_info(ad_soup):
    try:
        title_tag = ad_soup.find('h1')
        title = title_tag.get_text(strip=True) if title_tag else "–ë–µ–∑ –∑–∞–≥–ª–∞–≤–∏–µ"
        price_tag = ad_soup.find(class_='price')
        price = price_tag.get_text(strip=True) if price_tag else "–ù–µ –µ –ø–æ—Å–æ—á–µ–Ω–∞"

        time_tag = ad_soup.find(string=lambda text: text and ("–ü—É–±–ª–∏–∫—É–≤–∞–Ω–∞" in text or "–ö–æ—Ä–∏–≥–∏—Ä–∞–Ω–∞" in text))
        date = parse_date(time_tag) if time_tag else None

        return {'title': title, 'price': price, 'date': date}
    except Exception as e:
        logging.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e}")
        return None

# –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥–∏–∫–∞

def fetch_with_retry(url, retry=0):
    try:
        response = requests.get(url, headers=Config.HEADERS, timeout=Config.REQUEST_TIMEOUT)
        response.raise_for_status()
        return response
    except Exception as e:
        if retry < Config.MAX_RETRIES:
            time.sleep(2)
            return fetch_with_retry(url, retry+1)
        logging.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞ –∫—ä–º {url}: {e}")
        return None

def check_listings():
    new_ads = []
    today = datetime.now().date()
    yesterday = today - timedelta(days=1)

    for base_url in Config.URLS:
        page = 1
        while True:
            url = f"{base_url}&p={page}"
            response = fetch_with_retry(url)
            if not response:
                break

            soup = BeautifulSoup(response.text, 'html.parser')
            ads = soup.select('tr.odd, tr.even')
            if not ads:
                break

            stop_processing = False
            for ad in ads:
                link_tag = ad.select_one('td:nth-child(3) .bold a')
                if not link_tag or 'href' not in link_tag.attrs:
                    continue

                relative_link = link_tag['href']
                full_link = f"https:{relative_link}"

                if full_link in seen_links:
                    continue

                ad_response = fetch_with_retry(full_link)
                if not ad_response:
                    continue

                ad_soup = BeautifulSoup(ad_response.text, 'html.parser')
                ad_info = extract_ad_info(ad_soup)
                if not ad_info or not ad_info['date']:
                    continue

                if ad_info['date'].date() >= yesterday:
                    seen_links.add(full_link)
                    new_ads.append({
                        'title': ad_info['title'],
                        'price': ad_info['price'],
                        'link': full_link,
                        'date': ad_info['date'].strftime('%H:%M %d.%m.%Y')
                    })
                else:
                    stop_processing = True
                    break

            if stop_processing:
                break
            page += 1
            time.sleep(1)
    return new_ads

def send_daily_status():
    while True:
        now = datetime.now()
        if now.hour == 10 and now.minute == 0:
            msg = f"‚úÖ –ë–æ—Ç—ä—Ç –µ –∞–∫—Ç–∏–≤–µ–Ω\n{now.strftime('%d.%m.%Y %H:%M')}\n–°–ª–µ–¥–∏ {len(Config.URLS)} –ª–∏–Ω–∫–∞."
            send_telegram(msg)
            time.sleep(60)
        time.sleep(30)

@app.route('/')
def home():
    return "–ë–æ—Ç—ä—Ç –µ –∞–∫—Ç–∏–≤–µ–Ω."

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.json
    if data:
        chat_id = data.get('message', {}).get('chat', {}).get('id')
        text = data.get('message', {}).get('text', '').lower()

        if str(chat_id) == Config.TELEGRAM_CHAT_ID:
            if text == '/–ø–æ–∫–∞–∂–∏':
                new_ads = check_listings()
                if not new_ads:
                    send_telegram("–ù—è–º–∞ –Ω–æ–≤–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–∏ –æ–±—è–≤–∏ –æ—Ç –¥–Ω–µ—Å –∏ –≤—á–µ—Ä–∞.")
                else:
                    for ad in new_ads:
                        msg = f"üè† <b>{ad['title']}</b>\nüí∞ {ad['price']}\nüìÖ {ad['date']}\nüîó <a href='{ad['link']}'>–í–∏–∂ –æ–±—è–≤–∞—Ç–∞</a>"
                        send_telegram(msg)
    return 'OK'

def run_flask():
    app.run(host='0.0.0.0', port=5000)

def main():
    threading.Thread(target=run_flask, daemon=True).start()
    threading.Thread(target=send_daily_status, daemon=True).start()

    send_telegram("üöÄ –ë–æ—Ç—ä—Ç —Å—Ç–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏ –µ –≤ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç.")
    logging.info("–ë–æ—Ç—ä—Ç —Å—Ç–∞—Ä—Ç–∏—Ä–∞.")

    while True:
        try:
            new_ads = check_listings()
            for ad in new_ads:
                msg = f"üè† <b>{ad['title']}</b>\nüí∞ {ad['price']}\nüìÖ {ad['date']}\nüîó <a href='{ad['link']}'>–í–∏–∂ –æ–±—è–≤–∞—Ç–∞</a>"
                send_telegram(msg)
            time.sleep(Config.CHECK_INTERVAL)
        except Exception as e:
            logging.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}\n{traceback.format_exc()}")
            send_telegram(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
            time.sleep(60)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        send_telegram("üõë –ë–æ—Ç—ä—Ç –µ —Å–ø—Ä—è–Ω.")
        sys.exit(0)
    except Exception as e:
        logging.critical(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ: {e}\n{traceback.format_exc()}")
        send_telegram(f"üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ: {e}")
        sys.exit(1)

        sys.exit(0)
    except Exception as e:
        send_telegram(f"üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ: {e}")
        logging.critical(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ: {e}\n{traceback.format_exc()}")
        sys.exit(1)
