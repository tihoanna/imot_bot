import os
import sys
import requests
from bs4 import BeautifulSoup
import time
import logging
from datetime import datetime, timedelta
import threading
from dotenv import load_dotenv
import traceback

# –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ environment variables
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω–µ –Ω–∞ logging
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s: %(message)s',
    handlers=[
        logging.FileHandler('imot_bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
URLS = [
    'https://www.imot.bg/pcgi/imot.cgi?act=3&slink=bus0u5&f1=1',
    'https://www.imot.bg/pcgi/imot.cgi?act=3&slink=bus0z9&f1=1',
    'https://www.imot.bg/pcgi/imot.cgi?act=3&slink=bus0zw&f1=1',
    'https://www.imot.bg/pcgi/imot.cgi?act=3&slink=bus10u&f1=1',
]

# –ß–µ—Ç–µ–Ω–µ –Ω–∞ environment variables —Å default —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '')
PING_URL = os.getenv('PING_URL', '')  # –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–µ–Ω URL –∑–∞ keep-alive

# –ó–∞—â–∏—Ç–µ–Ω–∏ headers
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Accept-Language': 'bg-BG,bg;q=0.9,en-US;q=0.8,en;q=0.7',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
}

# Threadcsafe –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞ –ø—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ –Ω–∞ –ª–∏–Ω–∫–æ–≤–µ
class ThreadSafeSet:
    def __init__(self):
        self._set = set()
        self._lock = threading.Lock()
    
    def add(self, item):
        with self._lock:
            self._set.add(item)
    
    def __contains__(self, item):
        with self._lock:
            return item in self._set

seen_links = ThreadSafeSet()

def ping_service():
    """–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ ping –∫—ä–º –≤—ä–Ω—à–µ–Ω —Å—ä—Ä–≤–∏—Å –∑–∞ keep-alive"""
    while True:
        try:
            if PING_URL:
                requests.get(PING_URL, timeout=10)
                logging.info("–£—Å–ø–µ—à–µ–Ω ping –∫—ä–º keep-alive —É—Å–ª—É–≥–∞")
        except Exception as e:
            logging.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ ping: {e}")
        time.sleep(600)  # –ù–∞ –≤—Å–µ–∫–∏ 10 –º–∏–Ω—É—Ç–∏

def send_telegram(message):
    """–ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å —Ä–∞–∑—à–∏—Ä–µ–Ω–∞ –≥—Ä–µ—à–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        logging.error("–õ–∏–ø—Å–≤–∞—Ç Telegram credentials")
        return

    try:
        url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
        data = {
            'chat_id': TELEGRAM_CHAT_ID, 
            'text': message,
            'parse_mode': 'HTML'
        }
        response = requests.post(url, data=data, timeout=10)
        response.raise_for_status()
        logging.info(f"–£—Å–ø–µ—à–Ω–æ –∏–∑–ø—Ä–∞—Ç–µ–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ: {message[:50]}...")
    except requests.RequestException as e:
        logging.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º —Å—ä–æ–±—â–µ–Ω–∏–µ: {e}")
        # –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–µ–Ω –º–µ—Ö–∞–Ω–∏–∑—ä–º –∑–∞ –ª–æ–≥–≤–∞–Ω–µ –Ω–∞ –≥—Ä–µ—à–∫–∏
        with open('telegram_errors.log', 'a', encoding='utf-8') as f:
            f.write(f"{datetime.now()} - –ì—Ä–µ—à–∫–∞: {e}\n")

def get_all_listings(base_url):
    """–ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –ª–∏—Å—Ç–∏–Ω–≥–∏ —Å —Ä–∞–∑—à–∏—Ä–µ–Ω–∞ –≥—Ä–µ—à–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
    listings = []
    page = 1
    now = datetime.now()
    threshold_time = now - timedelta(minutes=10)
    
    try:
        while True:
            paged_url = f"{base_url}&p={page}"
            
            try:
                response = requests.get(paged_url, headers=HEADERS, timeout=15)
                response.raise_for_status()
            except requests.RequestException as e:
                logging.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {e}")
                break

            soup = BeautifulSoup(response.text, 'html.parser')
            rows = soup.select('tr.odd, tr.even')

            if not rows:
                break

            for row in rows:
                title_tag = row.select_one('td:nth-child(3) .bold')
                link_tag = row.select_one('td:nth-child(3) .bold a')
                date_tag = row.select_one('td:nth-child(6)')

                if not (title_tag and link_tag and date_tag):
                    continue

                date_text = date_tag.get_text(strip=True)

                try:
                    post_time = datetime.strptime(date_text, '%H:%M %d.%m.%Y')
                except ValueError:
                    continue

                if post_time.date() == now.date() and post_time >= threshold_time:
                    title = title_tag.get_text(strip=True)
                    link = link_tag.get('href')
                    if link:
                        listings.append((title, link.strip()))

            page += 1
    except Exception as e:
        logging.error(f"–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –ª–∏—Å—Ç–∏–Ω–≥–∏: {e}")
        logging.error(traceback.format_exc())
    
    return listings

def check_new_listings():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –Ω–æ–≤–∏ –ª–∏—Å—Ç–∏–Ω–≥–∏ —Å –ø–æ–¥–æ–±—Ä–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
    new_listings = []
    for url in URLS:
        try:
            for title, link in get_all_listings(url):
                if link not in seen_links:
                    seen_links.add(link)
                    new_listings.append((title, link))
        except Exception as e:
            logging.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ URL {url}: {e}")
            logging.error(traceback.format_exc())

    for title, link in new_listings:
        try:
            send_telegram(f"üè† –ù–æ–≤–∞ –æ–±—è–≤–∞ (–¥–æ 10 –º–∏–Ω—É—Ç–∏):\n<b>{title}</b>\nhttps:{link}")
        except Exception as e:
            logging.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ: {e}")

def send_daily_status():
    """–ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Ä–∞–∑—à–∏—Ä–µ–Ω –¥–Ω–µ–≤–µ–Ω —Å—Ç–∞—Ç—É—Å"""
    while True:
        try:
            now = datetime.now()
            if now.hour == 10 and now.minute == 0:
                # –ß–µ—Ç–µ–Ω–µ –Ω–∞ log —Ñ–∞–π–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏ –≥—Ä–µ—à–∫–∏
                try:
                    with open('imot_bot.log', 'r', encoding='utf-8') as f:
                        log_tail = f.readlines()[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏ 10 —Ä–µ–¥–∞
                except Exception:
                    log_tail = ["–ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –ø—Ä–æ—á–µ—Ç–µ log —Ñ–∞–π–ª–∞"]

                status_message = (
                    "‚úÖ –°—Ç–∞—Ç—É—Å –Ω–∞ –±–æ—Ç–∞:\n"
                    f"üïí –ß–∞—Å: {now.strftime('%H:%M:%S')}\n"
                    f"üìÖ –î–∞—Ç–∞: {now.strftime('%d.%m.%Y')}\n"
                    "ü§ñ –ü–æ—Å–ª–µ–¥–Ω–∏ log —Å—ä–æ–±—â–µ–Ω–∏—è:\n" +
                    "".join(log_tail[-5:])  # –ü–æ—Å–ª–µ–¥–Ω–∏ 5 —Ä–µ–¥–∞ –æ—Ç log
                )
                send_telegram(status_message)
                time.sleep(60)  # –ó–∞–±–∞–≤—è–Ω–µ, –∑–∞ –¥–∞ –Ω–µ –∏–∑–ø—Ä–∞—â–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        except Exception as e:
            logging.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –¥–Ω–µ–≤–µ–Ω —Å—Ç–∞—Ç—É—Å: {e}")
        
        time.sleep(30)

def main():
    """–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ environment variables
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        logging.critical("–õ–∏–ø—Å–≤–∞—Ç –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ environment variables!")
        sys.exit(1)

    # –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ threading
    threads = [
        threading.Thread(target=send_daily_status, daemon=True),
        threading.Thread(target=ping_service, daemon=True)
    ]
    
    for thread in threads:
        thread.start()

    # –ü—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ
    send_telegram("üöÄ –ë–æ—Ç—ä—Ç —Å—Ç–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏ –µ –≤ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç.")
    logging.info("–ë–æ—Ç—ä—Ç —Å—Ç–∞—Ä—Ç–∏—Ä–∞. –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –Ω–∞ –≤—Å–µ–∫–∏ 10 –º–∏–Ω—É—Ç–∏...")

    # –û—Å–Ω–æ–≤–µ–Ω —Ä–∞–±–æ—Ç–µ–Ω —Ü–∏–∫—ä–ª
    while True:
        try:
            check_new_listings()
        except Exception as e:
            logging.error(f"–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–∏—è —Ü–∏–∫—ä–ª: {e}")
            logging.error(traceback.format_exc())
        
        time.sleep(600)  # –ü–∞—É–∑–∞ –æ—Ç 10 –º–∏–Ω—É—Ç–∏

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç—ä—Ç –µ —Å–ø—Ä—è–Ω.")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
        logging.critical(traceback.format_exc())
        send_telegram(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
        sys.exit(1)
